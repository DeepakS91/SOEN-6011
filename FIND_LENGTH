#!/usr/bin/python
# -*- coding: utf-8 -*-

# -------------------------------------------------------------------------------
# Name:        FIND_LENGTH
# Purpose:
#
# Author:      Ranganath
#
# Created:     20/07/2017
# Copyright:   (c) Ranganath 2017
# Licence:     <your licence>
# -------------------------------------------------------------------------------


class FIND_LENGTH:

    def __init__(
        self,
        precision=50,
        tolerance=0.000001,
        init_val=2,
                ):

        self.precision = precision
        self.tolerance = tolerance
        self.init_val = init_val
        self.get_alpha()

    def get_pi(self):
        """Method Returns pi value."""

        global piv
        sum_val = 0
        for i in range(1, 100000 * self.precision):
            if i % 2 == 0:
                sum_val = sum_val - 1.0 / (2 * i - 1)
            else:
                sum_val = sum_val + 1.0 / (2 * i - 1)

        sum_res = sum_val * 4
        piv = sum_res

        return sum_res

    def factorial(self, val):
        """Method Returns  factorial of a number."""

        if val == 0:
            return 1
        else:
            return val * self.factorial(val - 1)

    def get_sin(self, radian):
        """Method Returns sin value of a number."""

        global sine
        res = radian
        for i in range(1, self.precision):
            if i % 2 == 0:
                res = res + radian ** (2 * i + 1) / self.factorial(2 * i + 1)
            else:
                res = res - radian ** (2 * i + 1) / self.factorial(2 * i + 1)
        sine = res

        return res

    def get_cos(self, radian):
        """Method Returns cos value of a number."""

        global cosine
        res = 1
        for i in range(1, self.precision):
            if i % 2 == 0:
                res = res + radian ** (2 * i) / self.factorial(2 * i)
            else:
                res = res - radian ** (2 * i) / self.factorial(2 * i)
        cosine = res

        return res

    def get_alpha(self):
        """Method Returns alpha value."""

        global alpha
        temp = self.init_val
        sin_int = self.get_sin(self.init_val)
        pi_val = self.get_pi()
        abs_val = abs(self.init_val - sin_int - pi_val / 2)
        while abs_val > self.tolerance:
            temp = temp - (temp - sin_int - pi_val / 2) / (1 - self.get_cos(temp))
            sin_int = self.get_sin(temp)
            abs_val = abs(temp - sin_int - pi_val / 2)

        alpha = temp

        return temp

    def get_len(self, radius):
        """Method Returns length value."""

        alpha = self.get_alpha()
        cos_int = 1 - self.get_cos(alpha / 2)
        l = 2 * int(radius) * cos_int
        return l


if __name__ == '__main__':
    find_length = FIND_LENGTH()
    radius = raw_input('Enter the value of radius: ')
    try:
        if int(radius) <= 0:
            exit('Please enter the value greater than 0')
    except ValueError:
        print 'please enter value greater than 0 and integer values'
        exit(1)

    len_val = find_length.get_len(radius)

    print 'pi value %.30f' % piv
    print 'Sin value:%.30f' % sine
    print 'Cos value:%.30f' % cosine
    print 'Alpha value:%.30f' % alpha
    print 'length value = %.30f' % len_val
