
import sys

class FIND_LENGTH:

    def __init__(self,precision=50,tolerance=0.000001,init_val=2):

        self.precision = precision
        self.tolerance = tolerance
        self.init_val = init_val
        self.get_alpha();

    def get_pi(self):
        """Return pi value."""
        sum_val = 0
        for i in range(1,(100000*self.precision)):
            if i%2 == 0:
               sum_val = sum_val - (1.0/(2*i - 1))
            else:
               sum_val = sum_val + (1.0/(2*i - 1))

        sum_res = sum_val * 4;
        print "pi value %.3f"%sum_res
        return sum_res

    def factorial(self,val):
        """Return  factorial of a number."""
        if val == 0:
           return 1
        else:
           return val * self.factorial(val-1)

    def get_sin(self, radian):
        """Return sin value of a number."""
        res = radian
        for i in range(1,self.precision):
            if i%2 == 0:
               res = res + ( radian**((2*i)+1) / self.factorial(2*i + 1))
            else:
               res = res - (radian**((2*i)+1) / self.factorial(2*i + 1))
        print "Sin value:%.3f"%res
        return res

    def get_cos(self, radian):
        """Return cos value of a number."""
        res = 1
        for i in range(1,self.precision):
            if i%2 == 0:
               res = res + ( radian**((2*i)) / self.factorial(2*i))
            else:
               res = res - (radian**((2*i)) / self.factorial(2*i))
        print "Cos value:%.3f"%res
        return res

    def get_alpha(self):
        """Return alpha value."""
        temp = self.init_val
        sin_int = self.get_sin(self.init_val);
        pi_val  = self.get_pi();
        abs_val = abs(self.init_val - sin_int - pi_val/2)
        while (abs_val > self.tolerance):
            temp = temp - (temp - sin_int - pi_val/2) / (1 - self.get_cos(temp))
            sin_int = self.get_sin(temp)
            abs_val = abs(temp - sin_int - pi_val/2)

        print "Alpha value:%.3f"%temp
        return temp


    def get_len(self, radius):
        """Return length value."""
        alpha = self.get_alpha();
        cos_int = (1 - self.get_cos(alpha / 2))
        l = 2 * int(radius) * cos_int
        return l



"""if __name__ == '__main__':
     find_length = FIND_LENGTH()
     radius = raw_input('Enter the value of radius: ')
     len_val = find_length.get_len(radius)
     document = ET.Element('cheers')
     node = ET.SubElement(document, 'result')
     node.text = "Length=%.3f"%len_val
     et = ET.ElementTree(document)

     with open('length_value.xml', 'wb') as out:
        out.write('<?xml version="1.0" encoding="utf-8" ?>')
        out.write('<!DOCTYPE cheers SYSTEM "cheers.dtd">')
        et.write(out, xml_declaration=False, encoding='utf-8')
     print "length value = %.3f"%len_val"""

if __name__ == '__main__':
     find_length = FIND_LENGTH()
     radius = raw_input('Enter the value of radius: ')
     len_val = find_length.get_len(radius)
     print "length value = %.3f"%len_val
     """document = ET.Element('cheers')
     node = ET.SubElement(document, 'result')
     node.text = "Length=%.2f"%len_val
     et = ET.ElementTree(document)

     f = BytesIO()
     f.write('<?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE cheers SYSTEM "cheers.dtd">')
     et.write(f, 'utf-8')
     et.write("length_value.xml")
     print(f.getvalue())  # your XML file, encoded as UTF-8"""


