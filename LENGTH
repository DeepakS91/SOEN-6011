#!/usr/bin/python
# -*- coding: utf-8 -*-

# -------------------------------------------------------------------------------
# Name:        LENGTH
# Purpose:
#
# Author:      Ranganath
#
# Created:     12/07/2017
# Copyright:   (c) Ranganath 2017
# Licence:     <your licence>
# -------------------------------------------------------------------------------

from xml.etree import ElementTree as ET
import xml.dom.minidom as MD
import math
import sys
import pdb


class LENGTH:

    def __init__(
        self,
        precision=50,
        tolerance=0.000001,
        init_val=2,
                ):

        self.precision = precision
        self.tolerance = tolerance
        self.init_val = init_val
        self.get_alpha()

    def get_pi(self):
        """Method Returns pi value."""

        global piv
        piv = math.pi
        return piv

    def get_sin(self, radian):
        """Method Returns sin value of a number."""

        global sine
        res = radian
        res = math.sin(radian)
        sine = res

        return res

    def get_cos(self, radian):
        """Method Returns cos value of a number."""

        global cosine
        res = 1
        res = res = math.cos(radian)
        cosine = res

        return res

    def get_alpha(self):
        """Method Returns alpha value."""

        global alpha
        temp = self.init_val
        sin_int = self.get_sin(self.init_val)
        pi_val = self.get_pi()
        abs_val = abs(self.init_val - sin_int - pi_val / 2)
        while abs_val > self.tolerance:
            temp = temp - (temp - sin_int - pi_val / 2) / (1 - self.get_cos(temp))
            sin_int = self.get_sin(temp)
            abs_val = abs(temp - sin_int - pi_val / 2)
        alpha = temp

        return temp

    def get_len(self, radius):
        """Method Returns length value."""

        alpha = self.get_alpha()
        cos_int = 1 - self.get_cos(alpha / 2)
        l = 2 * float(radius) * cos_int
        return l


if __name__ == '__main__':

    radius = raw_input('Enter the value of radius: ')
    try:
        if float(radius) < 0:
            exit('Please enter the value greater than or equal to 0')
    except ValueError:
        print 'please enter numeric values'
        exit(1)

    length = LENGTH()

    len_val = length.get_len(radius)

    print 'pi value %.30f' % piv
    print 'Sin value:%.30f' % sine
    print 'Cos value:%.30f' % cosine
    print 'Alpha value:%.30f' % alpha
    print 'length value = %.30f' % len_val
    print 'XML output of the following program is:'
    cheers = ET.Element('cheers')
    cheers.set('type', 'personal')
    node = ET.SubElement(cheers, 'length')
    node.text = 'Length_value=%.3f' % len_val


def presentation(element):
        serialized_string = ET.tostring(element, 'UTF-8')
        parsed_string = MD.parseString(serialized_string)
        return parsed_string.toprettyxml(indent=' ', encoding='UTF-8')

print presentation(cheers)
